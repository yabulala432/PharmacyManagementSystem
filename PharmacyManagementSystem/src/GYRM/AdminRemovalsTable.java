package GYRM;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.crypto.spec.PSource;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Locale;

import static GYRM.AdminLogin.admin;

public class AdminRemovalsTable extends JPanel {
    private JPanel removeEmployePanel;
    private JLabel removedEmployees;
    private JLabel removedEmpLable;
    private JButton deleteAllEmployeeButton;
    private JPanel removedItemPanel;
    private JLabel removedItemsLabel;
    private JButton deleteAllItemButton;
    private JLabel infoItemsLable;
    private JButton backToMenuButton;
    private JButton viewAllEmpButton;
    private JButton viewAllItemsButton;

    public AdminRemovalsTable(Main mainFrame) {
        $$$setupUI$$$();

        backToMenuButton.addActionListener(e -> {
            mainFrame.showPanel("adminMenu");
        });

        viewAllEmpButton.addActionListener(e -> {
            StringBuilder builder = new StringBuilder("<html><table><thead>");
            builder.append("<th>Remover</th><th>RemovedEmployee</th><th>Reason</th></thead><tbody>");
            ArrayList<String[]> list;
            try {
                list = admin.viewAllRemovedEmployee();
                for (String[] row : list) {
                    builder.append("<tr>");
                    for (String string : row) {
                        builder.append("<td>");
                        builder.append(string);
                        System.out.println(string);
                        builder.append("</td>");
                    }
                    builder.append("</tr>");
                }
                builder.append("</tbody></table></html>");
                removedEmpLable.setText(builder.toString());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "error");
            }
        });

        viewAllItemsButton.addActionListener(e -> {
            StringBuilder builder = new StringBuilder("<html><table><thead>");
            builder.append("<th>Remover</th><th>RemovedItem</th><th>Reason</th></thead><tbody>");
            ArrayList<String[]> list;
            try {
                list = admin.viewAllRemovedItems();
//                    System.out.println("size: " + list.size());
                for (String[] row : list) {
                    builder.append("<tr>");
                    for (String string : row) {
                        builder.append("<td>");
                        builder.append(string);
                        System.out.println(string);
                        builder.append("</td>");
                    }
                    builder.append("</tr>");
                }
                builder.append("</tbody></table></html>");
                removedItemsLabel.setText(builder.toString());
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "error");
            }
        });

        deleteAllEmployeeButton.addActionListener(e -> {
            try {
                admin.deleteAllRemovedEmployee();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,"error ocurred");
            }
        });

        deleteAllItemButton.addActionListener(e -> {
            try{
                admin.deleteAllRemovedItems();
            } catch (SQLException exception){
                JOptionPane.showMessageDialog(this,"error occured");
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
//        $$$setupUI$$$();
    }

    private void $$$setupUI$$$() {
        this.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        this.setBackground(new Color(-4850955));
        removeEmployePanel = new JPanel();
        removeEmployePanel.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        removeEmployePanel.setBackground(new Color(-4850955));
        this.add(removeEmployePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        removeEmployePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        removedEmployees = new JLabel();
        Font removedEmployeesFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, removedEmployees.getFont());
        if (removedEmployeesFont != null) removedEmployees.setFont(removedEmployeesFont);
        removedEmployees.setForeground(new Color(-16777216));
        removedEmployees.setText("Removed Employees");
        removeEmployePanel.add(removedEmployees, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        deleteAllEmployeeButton = new JButton();
        Font deleteAllEmployeeButtonFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, deleteAllEmployeeButton.getFont());
        if (deleteAllEmployeeButtonFont != null) deleteAllEmployeeButton.setFont(deleteAllEmployeeButtonFont);
        deleteAllEmployeeButton.setText("Delete All");
        removeEmployePanel.add(deleteAllEmployeeButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removedEmpLable = new JLabel();
        Font removedEmpLableFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, removedEmpLable.getFont());
        if (removedEmpLableFont != null) removedEmpLable.setFont(removedEmpLableFont);
        removedEmpLable.setForeground(new Color(-16777216));
        removedEmpLable.setText("Info Employee");
        removeEmployePanel.add(removedEmpLable, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        removeEmployePanel.add(spacer1, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        removeEmployePanel.add(spacer2, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        removeEmployePanel.add(spacer3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        viewAllEmpButton = new JButton();
        viewAllEmpButton.setText("View All");
        removeEmployePanel.add(viewAllEmpButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        removedItemPanel = new JPanel();
        removedItemPanel.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        removedItemPanel.setBackground(new Color(-4850955));
        this.add(removedItemPanel, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        removedItemsLabel = new JLabel();
        Font removedItemsLabelFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, removedItemsLabel.getFont());
        if (removedItemsLabelFont != null) removedItemsLabel.setFont(removedItemsLabelFont);
        removedItemsLabel.setForeground(new Color(-16777216));
        removedItemsLabel.setText("Removed Items");
        removedItemPanel.add(removedItemsLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        deleteAllItemButton = new JButton();
        Font deleteAllItemButtonFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, deleteAllItemButton.getFont());
        if (deleteAllItemButtonFont != null) deleteAllItemButton.setFont(deleteAllItemButtonFont);
        deleteAllItemButton.setText("Delete All");
        removedItemPanel.add(deleteAllItemButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        infoItemsLable = new JLabel();
        Font infoItemsLableFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, infoItemsLable.getFont());
        if (infoItemsLableFont != null) infoItemsLable.setFont(infoItemsLableFont);
        infoItemsLable.setForeground(new Color(-16777216));
        infoItemsLable.setText("Info Items");
        removedItemPanel.add(infoItemsLable, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        removedItemPanel.add(spacer4, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        removedItemPanel.add(spacer5, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        removedItemPanel.add(spacer6, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        viewAllItemsButton = new JButton();
        viewAllItemsButton.setText("View All");
        removedItemPanel.add(viewAllItemsButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backToMenuButton = new JButton();
        backToMenuButton.setText("<- back to menu");
        this.add(backToMenuButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer7 = new Spacer();
        this.add(spacer7, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer8 = new Spacer();
        this.add(spacer8, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return this;
    }

}
