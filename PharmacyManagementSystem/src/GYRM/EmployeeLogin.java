package GYRM;

import DatabaseLogics.Employee;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.SQLException;
import java.util.Locale;

public class EmployeeLogin extends JPanel{
//    private JPanel this;
    private JTextField usernameField;
    private JTextField passwordField;
    private JButton loginButton;
    private JButton exitButton;
    private JLabel userName;
    private JLabel password;
    private JLabel EmployeeLabel;
    public static Employee employee;

    public EmployeeLogin(Main mainFrame){
        $$$setupUI$$$();
        loginButton.addActionListener(e -> {
            String username = usernameField.getText();
            String password = passwordField.getText();
            usernameField.setText("");
            passwordField.setText("");
            try {
                employee = new Employee(username,password);
                mainFrame.showPanel("employeeMenu");
            } catch (SQLException | IllegalStateException ex) {
                JOptionPane.showMessageDialog(this,"Incorrect Username or Password");
            }
        });

        exitButton.addActionListener(e -> {
            mainFrame.showPanel("firstPage");
        });
    }
    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
//        this = new JPanel();
        this.setLayout(new GridLayoutManager(6, 6, new Insets(10, 10, 10, 10), -1, -1));
        this.setBackground(new Color(-7754497));
        Font mainPanelFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 48, this.getFont());
        if (mainPanelFont != null) this.setFont(mainPanelFont);
        this.setBorder(BorderFactory.createTitledBorder(null, "", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        EmployeeLabel = new JLabel();
        EmployeeLabel.setBackground(new Color(-15056595));
        Font EmployeeLabelFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 48, EmployeeLabel.getFont());
        if (EmployeeLabelFont != null) EmployeeLabel.setFont(EmployeeLabelFont);
        EmployeeLabel.setForeground(new Color(-272410));
        EmployeeLabel.setText("Employee");
        this.add(EmployeeLabel, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 10, false));
        loginButton = new JButton();
        Font loginButtonFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, loginButton.getFont());
        if (loginButtonFont != null) loginButton.setFont(loginButtonFont);
        loginButton.setText("Login");
        this.add(loginButton, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        userName = new JLabel();
        Font userNameFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, userName.getFont());
        if (userNameFont != null) userName.setFont(userNameFont);
        userName.setForeground(new Color(-272410));
        userName.setText("UserName");
        this.add(userName, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usernameField = new JTextField();
        Font usernameFieldFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, usernameField.getFont());
        if (usernameFieldFont != null) usernameField.setFont(usernameFieldFont);
        usernameField.setForeground(new Color(-16777216));
        this.add(usernameField, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordField = new JTextField();
        Font passwordFieldFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, passwordField.getFont());
        if (passwordFieldFont != null) passwordField.setFont(passwordFieldFont);
        passwordField.setForeground(new Color(-16777216));
        this.add(passwordField, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        password = new JLabel();
        Font passwordFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, password.getFont());
        if (passwordFont != null) password.setFont(passwordFont);
        password.setForeground(new Color(-272410));
        password.setText("Password");
        this.add(password, new GridConstraints(3, 1, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        this.add(spacer1, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        this.add(spacer2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        this.add(spacer3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        this.add(spacer4, new GridConstraints(4, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        exitButton = new JButton();
        Font exitButtonFont = this.$$$getFont$$$("Serif", Font.BOLD | Font.ITALIC, 18, exitButton.getFont());
        if (exitButtonFont != null) exitButton.setFont(exitButtonFont);
        exitButton.setForeground(new Color(-3670016));
        exitButton.setHideActionText(false);
        exitButton.setText("back");
        this.add(exitButton, new GridConstraints(4, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return this;
    }

}
